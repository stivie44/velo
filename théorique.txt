1/ Qu'est-ce qu'une API ? Donner un exemple d'utilisation d'une API dans un projet

Une API (Application Programming Interface) est un ensemble de règles et de protocoles qui permettent à des applications informatiques de communiquer entre elles. 
En d'autres termes, c'est une interface qui permet à un programme d'interagir avec un autre programme ou un service en utilisant des requêtes et des réponses standardisées.

Un exemple d'utilisation d'une API dans un projet serait l'intégration d'un système de paiement en ligne dans une application de commerce électronique. 
L'API du système de paiement permettrait à l'application de communiquer avec le système de paiement pour effectuer des transactions sécurisées en temps réel. 
L'API pourrait également fournir des informations sur l'état des transactions et les données de facturation. 
De cette façon, l'application peut offrir à ses utilisateurs une expérience de paiement en ligne transparente et sécurisée sans avoir à développer toute la logique de paiement elle-même.


2/ Qu'est-ce qu'un webhook ? Expliquer son fonctionnement et donner un exemple de son utilisation.

Un webhook est un système de communication automatisé qui permet à une application web d'envoyer des données en temps réel à une autre application. 
En d'autres termes, un webhook est une URL qui permet à une application web de recevoir des informations à chaque fois qu'un événement spécifique se produit dans une autre application.

Le fonctionnement d'un webhook est assez simple. Lorsqu'un événement se produit dans une application, telle que la création d'un nouvel utilisateur ou la modification d'un enregistrement dans une base de données, cette application envoie une requête HTTP à l'URL spécifiée du webhook. 
Cette requête contient les données relatives à l'événement, telles que l'ID de l'utilisateur ou les détails de la modification de l'enregistrement. L'application recevant la requête webhook peut alors traiter ces données et les utiliser selon ses besoins.

Un exemple courant de l'utilisation d'un webhook est dans les applications de commerce électronique. Supposons qu'un client passe une commande dans une boutique en ligne. Une fois la commande passée, l'application envoie une requête webhook à l'URL spécifiée pour informer une application tiers, telle que celle chargée de la gestion des stocks, de la nouvelle commande. 
Cette application peut alors mettre à jour le stock pour refléter la nouvelle commande et envoyer une confirmation de l'envoi de la commande au client. De cette façon, les différentes applications communiquent entre elles de manière transparente et efficace grâce à l'utilisation de webhooks.


3/ Quelle est la différence entre une base de données relationnelle et une base de données non relationnelle ?

Les bases de données relationnelles et non relationnelles diffèrent dans leur structure de stockage des données et leur façon de manipuler les données. 
Voici les principales différences entre ces deux types de bases de données :

Structure de stockage des données :
Les bases de données relationnelles stockent les données dans des tables structurées, où chaque table est constituée de colonnes et de lignes. 
Les relations entre les tables sont définies par des clés étrangères qui permettent de lier les données entre elles. 
En revanche, les bases de données non relationnelles stockent les données dans des documents, des graphes ou des paires clé-valeur, qui peuvent être stockés dans des collections ou des fichiers.

Flexibilité de schéma :
Les bases de données relationnelles ont un schéma rigide et pré-défini qui détermine les types de données et les relations entre les tables. 
En revanche, les bases de données non relationnelles ont un schéma flexible et évolutif qui permet d'ajouter de nouveaux types de données sans modifier le schéma existant.

Requêtes et performances :
Les bases de données relationnelles utilisent le langage SQL (Structured Query Language) pour interroger les données et effectuer des opérations telles que les jointures et les agrégations. 
Les bases de données non relationnelles utilisent des langages spécifiques à chaque type de base de données pour manipuler les données. 
En général, les bases de données non relationnelles sont plus performantes que les bases de données relationnelles pour les requêtes sur de grandes quantités de données non structurées.

Extensibilité :
Les bases de données non relationnelles sont conçues pour être facilement extensibles à mesure que les besoins de stockage des données augmentent. 
Les bases de données relationnelles sont plus difficiles à étendre en raison de leur schéma rigide.

En conclusion, les bases de données relationnelles sont adaptées aux applications nécessitant des relations complexes entre les données structurées, tandis que les bases de données non relationnelles conviennent mieux aux applications nécessitant une flexibilité de stockage des données et une extensibilité facile.


4/ Déjà utilisé Python ? Explique brièvement ton expérience ou tes connaissances concernant le langage

Oui j'ai déjà travaillé avec python lors d'un projet de groupe où nous devions faire un jeu de rôles avec plusieurs personnages. Et un projet avec une base de données Sql.


5/ Déjà utilisé Wordpress ou Odoo ? Explique brièvement ton expérience ou tes connaissances concernant ces outils

Oui j'ai déjà utilisé wordpress dans un projet lors de ma première année, j'ai juste quelques bases mais j'ai pour objectif de développer un projet cette année.


